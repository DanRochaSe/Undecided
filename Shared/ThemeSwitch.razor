@using UndecidedApp.Services

@inject IColorModeService ColorModeService
@inject IJSRuntime JS


<div class="nav-item px-3" id="themeSwitch">
    @if (CurrentTheme == "dark")
    {
        <button class="btn border-0" @onclick="@(() => ToggleTheme())">
            <i class="fas fa-sun fa-2x" style="color: white !important;"></i>
        </button>
    }
    else
    {
        <button class="btn border-0" @onclick="@(() => ToggleTheme())">
            <i class="fas fa-moon fa-2x" style="color: black !important;"></i>
        </button>
    }
</div>

@code {
    private string CurrentTheme = "dark";   
    private bool _firstRender = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "theme");
            CurrentTheme = string.IsNullOrEmpty(savedTheme) ? "dark" : savedTheme;
            //ColorModeService.SetCurrentColorMode(CurrentTheme);
            await JS.InvokeVoidAsync("SetTheme", CurrentTheme);
            _firstRender = false;
            StateHasChanged(); // Request a re-render since we've now modified the state

        }
        
    }

    private async Task ToggleTheme()
    {
        CurrentTheme = CurrentTheme == "dark" ? "light" : "dark";
        await JS.InvokeVoidAsync("SetTheme", CurrentTheme);
        await JS.InvokeVoidAsync("localStorage.setItem", "theme", CurrentTheme);
        //ColorModeService.SetCurrentColorMode(CurrentTheme);

        StateHasChanged(); // Request a re-render since we've now modified the state


    }
}
